FILE(1)                                     BSD General Commands Manual                                     FILE(1)

NNAAMMEE
     ffiillee — determine file type

SSYYNNOOPPSSIISS
     ffiillee [--bbccddEEhhiikkllLLNNnnpprrssvvzzZZ00] [----aappppllee] [----eexxtteennssiioonn] [----mmiimmee--eennccooddiinngg] [----mmiimmee--ttyyppee] [--ee _t_e_s_t_n_a_m_e]
          [--FF _s_e_p_a_r_a_t_o_r] [--ff _n_a_m_e_f_i_l_e] [--mm _m_a_g_i_c_f_i_l_e_s] [--PP _n_a_m_e_=_v_a_l_u_e] _f_i_l_e _._._.
     ffiillee --CC [--mm _m_a_g_i_c_f_i_l_e_s]
     ffiillee [----hheellpp]

DDEESSCCRRIIPPTTIIOONN
     This manual page documents version 5.32 of the ffiillee command.

     ffiillee tests each argument in an attempt to classify it.  There are three sets of tests, performed in this
     order: filesystem tests, magic tests, and language tests.  The _f_i_r_s_t test that succeeds causes the file type
     to be printed.

     The type printed will usually contain one of the words _t_e_x_t (the file contains only printing characters and a
     few common control characters and is probably safe to read on an ASCII terminal), _e_x_e_c_u_t_a_b_l_e (the file con‐
     tains the result of compiling a program in a form understandable to some UNIX kernel or another), or _d_a_t_a
     meaning anything else (data is usually “binary” or non-printable).  Exceptions are well-known file formats
     (core files, tar archives) that are known to contain binary data.  When adding local definitions to
     /etc/magic, make sure to _p_r_e_s_e_r_v_e _t_h_e_s_e _k_e_y_w_o_r_d_s.  Users depend on knowing that all the readable files in a
     directory have the word “text” printed.  Don't do as Berkeley did and change “shell commands text” to “shell
     script”.

     The filesystem tests are based on examining the return from a stat(2) system call.  The program checks to see
     if the file is empty, or if it's some sort of special file.  Any known file types appropriate to the system
     you are running on (sockets, symbolic links, or named pipes (FIFOs) on those systems that implement them) are
     intuited if they are defined in the system header file <_s_y_s_/_s_t_a_t_._h>.

     The magic tests are used to check for files with data in particular fixed formats.  The canonical example of
     this is a binary executable (compiled program) a.out file, whose format is defined in <_e_l_f_._h>, <_a_._o_u_t_._h> and
     possibly <_e_x_e_c_._h> in the standard include directory.  These files have a “magic number” stored in a particular
     place near the beginning of the file that tells the UNIX operating system that the file is a binary exe‐
     cutable, and which of several types thereof.  The concept of a “magic” has been applied by extension to data
     files.  Any file with some invariant identifier at a small fixed offset into the file can usually be described
     in this way.  The information identifying these files is read from /etc/magic and the compiled magic file
     _/_u_s_r_/_s_h_a_r_e_/_m_i_s_c_/_m_a_g_i_c_._m_g_c, or the files in the directory _/_u_s_r_/_s_h_a_r_e_/_m_i_s_c_/_m_a_g_i_c if the compiled file does not
     exist.  In addition, if _$_H_O_M_E_/_._m_a_g_i_c_._m_g_c or _$_H_O_M_E_/_._m_a_g_i_c exists, it will be used in preference to the system
     magic files.

     If a file does not match any of the entries in the magic file, it is examined to see if it seems to be a text
     file.  ASCII, ISO-8859-x, non-ISO 8-bit extended-ASCII character sets (such as those used on Macintosh and IBM
     PC systems), UTF-8-encoded Unicode, UTF-16-encoded Unicode, and EBCDIC character sets can be distinguished by
     the different ranges and sequences of bytes that constitute printable text in each set.  If a file passes any
     of these tests, its character set is reported.  ASCII, ISO-8859-x, UTF-8, and extended-ASCII files are identi‐
     fied as “text” because they will be mostly readable on nearly any terminal; UTF-16 and EBCDIC are only
     “character data” because, while they contain text, it is text that will require translation before it can be
     read.  In addition, ffiillee will attempt to determine other characteristics of text-type files.  If the lines of
     a file are terminated by CR, CRLF, or NEL, instead of the Unix-standard LF, this will be reported.  Files that
     contain embedded escape sequences or overstriking will also be identified.

     Once ffiillee has determined the character set used in a text-type file, it will attempt to determine in what lan‐
     guage the file is written.  The language tests look for particular strings (cf.  <_n_a_m_e_s_._h>) that can appear
     anywhere in the first few blocks of a file.  For example, the keyword _._b_r indicates that the file is most
     likely a troff(1) input file, just as the keyword _s_t_r_u_c_t indicates a C program.  These tests are less reliable
     than the previous two groups, so they are performed last.  The language test routines also test for some mis‐
     cellany (such as tar(1) archives).

     Any file that cannot be identified as having been written in any of the character sets listed above is simply
     said to be “data”.

OOPPTTIIOONNSS
     ----aappppllee
             Causes the file command to output the file type and creator code as used by older MacOS versions. The
             code consists of eight letters, the first describing the file type, the latter the creator.

     --bb, ----bbrriieeff
             Do not prepend filenames to output lines (brief mode).

     --CC, ----ccoommppiillee
             Write a _m_a_g_i_c_._m_g_c output file that contains a pre-parsed version of the magic file or directory.

     --cc, ----cchheecckkiinngg--pprriinnttoouutt
             Cause a checking printout of the parsed form of the magic file.  This is usually used in conjunction
             with the --mm flag to debug a new magic file before installing it.

     --dd      Prints internal debugging information to stderr.

     --EE      On filesystem errors (file not found etc), instead of handling the error as regular output as POSIX
             mandates and keep going, issue an error message and exit.

     --ee, ----eexxcclluuddee _t_e_s_t_n_a_m_e
             Exclude the test named in _t_e_s_t_n_a_m_e from the list of tests made to determine the file type.  Valid test
             names are:

             apptype   EMX application type (only on EMX).

             ascii     Various types of text files (this test will try to guess the text encoding, irrespective of
                       the setting of the ‘encoding’ option).

             encoding  Different text encodings for soft magic tests.

             tokens    Ignored for backwards compatibility.

             cdf       Prints details of Compound Document Files.

             compress  Checks for, and looks inside, compressed files.

             elf       Prints ELF file details, provided soft magic tests are enabled and the elf magic is found.

             soft      Consults magic files.

             tar       Examines tar files.

             text      A synonym for ‘ascii’.

     ----eexxtteennssiioonn
             Print a slash-separated list of valid extensions for the file type found.

     --FF, ----sseeppaarraattoorr _s_e_p_a_r_a_t_o_r
             Use the specified string as the separator between the filename and the file result returned.  Defaults
             to ‘:’.

     --ff, ----ffiilleess--ffrroomm _n_a_m_e_f_i_l_e
             Read the names of the files to be examined from _n_a_m_e_f_i_l_e (one per line) 